generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String     @id @unique @default(uuid())
  username      String     @unique
  password      String
  email         String?
  createdAt     DateTime   @default(now())
  styling       Int        @default(0)
  isBlacklisted Boolean    @default(false)
  acceptedRules Boolean    @default(false)
  acceptedTerms Boolean    @default(false)
  role          Role       @default(USER)
  ApiKey        ApiKey[]
  comments      Comment[]
  feedbacks     Feedback[]
  chatSessions  ChatSession[]
  journals      Journal[]
  posts         Post[]
  escalationEvents EscalationEvent[]
  activityLogs     UserActivityLog[]
  moodLogs         MoodLog[]
  resourceInteractions UserResourceInteraction[]
  goals            Goal[]
  reminders        Reminder[]
  userBadges       UserBadge[]
  streaks          Streak[]
  reviewLogs       ReviewLog[] @relation("UserReviewLogs")
}

model Post {
  id               String    @id @unique @default(uuid())
  text             String
  at               DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  userId           String?
  isPublished      Boolean   @default(true)
  flagReason       String?
  isFlagged        Boolean?  @default(false)
  moderationScores Json?
  needsReview      Boolean?  @default(false)
  Comment          Comment[]
  User             User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id      String    @id @unique @default(uuid())
  text    String
  at      DateTime? @default(now())
  postsId String
  userId  String
  post    Post      @relation(fields: [postsId], references: [id])
  author  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Journal {
  id               String    @id @unique @default(uuid())
  title            String
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  userId           String
  styling          Int       @default(0)
  isPublic         Boolean   @default(false)
  flagReason       String?
  isFlagged        Boolean   @default(false)
  moderationScores Json?
  needsReview      Boolean?  @default(false)
  entries          Entry[]
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Entry {
  id               String    @id @unique @default(uuid())
  title            String
  text             String
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
  authorId         String
  journalId        String
  flagReason       String?
  isFlagged        Boolean?  @default(false)
  moderationScores Json?
  needsReview      Boolean?  @default(false)
  journal          Journal   @relation(fields: [journalId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String    @id @unique @default(uuid())
  text      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id])
}

model ApiKey {
  id        String   @id
  key       String   @unique
  adminId   String
  createdAt DateTime @default(now())
  thingyMod Boolean  @default(false)
  User      User     @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id            String    @id @unique @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime     DateTime  @default(now())
  endTime       DateTime?
  duration      Int?      // Duration in minutes
  mood          String    // User's reported mood at start
  messages      Message[]
  feedback      ChatFeedback?
  escalationEvents EscalationEvent[]
  sessionSummaries SessionSummary?
  reviewLogs       ReviewLog[]
}

model Message {
  id          String    @id @unique @default(uuid())
  chatSession String
  session     ChatSession @relation(fields: [chatSession], references: [id], onDelete: Cascade)
  text        String
  isUser      Boolean   // true if from user, false if from bot
  createdAt   DateTime  @default(now())
  analysis         MessageAnalysis?
  escalationEvents EscalationEvent[]
}

model ChatFeedback {
  id          String    @id @unique @default(uuid())
  chatSession String    @unique
  session     ChatSession @relation(fields: [chatSession], references: [id], onDelete: Cascade)
  rating      Int       // 1-5 rating
  comment     String?
  createdAt   DateTime  @default(now())
}

model MessageAnalysis {
  id          String   @id @default(uuid())
  messageId   String   @unique
  sentiment   String   // e.g., "positive", "neutral", "negative"
  riskLevel   String   // e.g., "none", "low", "moderate", "high", "crisis"
  flagged     Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model EscalationEvent {
  id            String   @id @default(uuid())
  userId        String
  messageId     String?
  sessionId     String?
  type          String   // e.g., "crisis", "moderation", "manual"
  status        String   // e.g., "open", "reviewed", "resolved"
  notes         String?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message       Message? @relation(fields: [messageId], references: [id])
  session       ChatSession? @relation(fields: [sessionId], references: [id])
}

model CopingActivity {
  id          String   @id @default(uuid())
  name        String
  description String
  type        String   // e.g., "breathing", "journaling", "mindfulness"
  resourceUrl String?
  logs        UserActivityLog[]
}

model UserActivityLog {
  id              String   @id @default(uuid())
  userId          String
  activityId      String
  completedAt     DateTime @default(now())
  notes           String?
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity        CopingActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
}

model MoodLog {
  id          String   @id @default(uuid())
  userId      String
  mood        String
  loggedAt    DateTime @default(now())
  notes       String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resource {
  id          String   @id @default(uuid())
  title       String
  url         String
  type        String   // e.g., "article", "video", "helpline"
  description String?
  tags        String?
  createdAt   DateTime @default(now())
  interactions UserResourceInteraction[]
}

model UserResourceInteraction {
  id           String   @id @default(uuid())
  userId       String
  resourceId   String
  interactedAt DateTime @default(now())
  action       String   // e.g., "viewed", "saved", "shared"
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource     Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
}

model FAQ {
  id          String   @id @default(uuid())
  question    String
  answer      String
  tags        String?
  createdAt   DateTime @default(now())
}

model Goal {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  targetDate  DateTime?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reminder {
  id          String   @id @default(uuid())
  userId      String
  message     String
  remindAt    DateTime
  sent        Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String
  iconUrl     String?
  users       UserBadge[]
}

model UserBadge {
  id          String   @id @default(uuid())
  userId      String
  badgeId     String
  awardedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge       Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
}

model Streak {
  id          String   @id @default(uuid())
  userId      String
  type        String   // e.g., "chat", "journal"
  count       Int      @default(0)
  lastActive  DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SessionSummary {
  id            String   @id @default(uuid())
  sessionId     String   @unique
  summary       String
  createdAt     DateTime @default(now())
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model ReviewLog {
  id            String   @id @default(uuid())
  reviewerId    String
  sessionId     String
  notes         String
  reviewedAt    DateTime @default(now())
  reviewer      User     @relation("UserReviewLogs", fields: [reviewerId], references: [id], onDelete: Cascade)
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  MODERATOR
  USER
}
